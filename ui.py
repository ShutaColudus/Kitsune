import bpy
import datetime
from bpy.props import StringProperty, BoolProperty, EnumProperty, IntProperty, PointerProperty, CollectionProperty, FloatProperty
from . import utils
from .api import get_provider_instance, create_context_info, APIRequestThread

# Chat attachment
class KitsuneAttachment(bpy.types.PropertyGroup):
    """Information for attachments in chat"""
    path: StringProperty(
        name="Path",
        description="Path to the attachment file",
        default=""
    )
    name: StringProperty(
        name="Name",
        description="Display name of the attachment",
        default=""
    )
    type: StringProperty(
        name="Type",
        description="Type of the attachment",
        default="FILE"
    )
    preview_image: StringProperty(
        name="Preview Image",
        description="Data path for image preview",
        default=""
    )

# Chat message
class KitsuneChatMessage(bpy.types.PropertyGroup):
    """Class representing an individual chat message"""
    content: StringProperty(
        name="Content",
        description="Content of the message",
        default=""
    )
    sender: StringProperty(
        name="Sender",
        description="Sender of the message (USER/AI)",
        default="USER"
    )
    timestamp: StringProperty(
        name="Timestamp",
        description="Timestamp of the message",
        default=""
    )
    code: StringProperty(
        name="Code",
        description="Code generated by AI",
        default=""
    )
    attachments: CollectionProperty(
        type=KitsuneAttachment,
        name="Attachments",
        description="Files attached to the message"
    )

# Chat session
class KitsuneChatSession(bpy.types.PropertyGroup):
    """Class representing a chat session"""
    name: StringProperty(
        name="Name",
        description="Name of the chat session",
        default="New Chat"
    )
    messages: CollectionProperty(
        type=KitsuneChatMessage,
        name="Messages",
        description="List of messages in the chat session"
    )
    active_message_index: IntProperty(
        name="Active Message Index",
        description="Index of the currently active message",
        default=0
    )
    created_at: StringProperty(
        name="Created At",
        description="Creation date and time of the session",
        default=""
    )

# UI Properties
class KitsuneUIProperties(bpy.types.PropertyGroup):
    """Property group for Kitsune UI"""
    input_text: StringProperty(
        name="Input",
        description="User input text",
        default=""
    )
    chat_sessions: CollectionProperty(
        type=KitsuneChatSession,
        name="Chat Sessions",
        description="List of chat sessions"
    )
    active_session_index: IntProperty(
        name="Active Session Index",
        description="Index of the currently active session",
        default=0
    )
    is_processing: BoolProperty(
        name="Is Processing",
        description="Whether AI is processing",
        default=False
    )
    view_mode: EnumProperty(
        name="View Mode",
        description="Display mode",
        items=[
            ('CHAT', "Chat", "Chat mode"),
            ('SETTINGS', "Settings", "Settings mode"),
        ],
        default='CHAT'
    )
    attachment_path: StringProperty(
        name="Attachment Path",
        description="Path to the attachment file",
        default="",
        subtype='FILE_PATH'
    )
    panel_height: FloatProperty(
        name="Panel Height",
        description="Panel height (value from 0 to 1, 1 for maximum height)",
        default=1.0,
        min=0.3,
        max=1.0
    )
    # Chat display settings
    chat_display_settings: BoolProperty(
        name="Display Settings",
        description="Expand display settings",
        default=False
    )
    # Image attachment settings
    image_preview_size: EnumProperty(
        name="Image Preview Size",
        description="Preview size of attached images",
        items=[
            ('SMALL', "Small", "Small size (128px)"),
            ('MEDIUM', "Medium", "Medium size (256px)"),
            ('LARGE', "Large", "Large size (512px)"),
        ],
        default='MEDIUM'
    )
    # Scroll position
    scroll_position: IntProperty(
        name="Scroll Position",
        description="Scroll position in chat history",
        default=0
    )

# Draw chat message function
def draw_chat_message(layout, message, addon_prefs):
    """Draw a chat message"""
    
    is_user = message.sender == "USER"
    
    # Message box
    box = layout.box()
    box.scale_y = 0.9  # Scale adjustment for messages
    
    # Header (sender and time)
    row = box.row()
    
    if is_user:
        row.label(text="You", icon='USER')
    else:
        row.label(text="AI", icon='LIGHT')
        
    if addon_prefs.show_timestamps and message.timestamp:
        row.label(text=message.timestamp)
    
    # Message content
    content_box = box.column()
    content_box.scale_y = 0.9
    
    # Message text (displayed line by line)
    for line in message.content.split("\n"):
        if line.strip():  # Skip empty lines
            content_box.label(text=line)
        else:
            content_box.separator()
    
    # If there are attachments
    if len(message.attachments) > 0:
        box.separator()
        attachment_box = box.box()
        attachment_box.label(text="Attachments:", icon='FILE')
        
        for attachment in message.attachments:
            row = attachment_box.row()
            row.label(text=attachment.name)
    
    # If there's code from AI
    if not is_user and message.code:
        code_box = box.box()
        code_box.label(text="Generated Code:", icon='SCRIPT')
        
        code_col = code_box.column()
        code_col.scale_y = 0.85
        
        # Display code
        for line in message.code.split("\n"):
            code_col.label(text=line)
        
        # Code operation buttons
        row = code_box.row(align=True)
        copy_op = row.operator("kitsune.copy_code", text="Copy", icon='COPYDOWN')
        copy_op.code = message.code
        
        preview_op = row.operator("kitsune.preview_code", text="Preview", icon='HIDE_OFF')
        preview_op.code = message.code
        
        execute_op = row.operator("kitsune.execute_code", text="Execute", icon='PLAY')
        execute_op.code = message.code

# Chat session list
class KITSUNE_UL_chat_sessions(bpy.types.UIList):
    """UI list for chat sessions"""
    def draw_item(self, context, layout, data, item, icon, active_data, active_propname):
        if self.layout_type in {'DEFAULT', 'COMPACT'}:
            layout.label(text=item.name, icon='OUTLINER_DATA_GP_LAYER')
        elif self.layout_type in {'GRID'}:
            layout.alignment = 'CENTER'
            layout.label(text="", icon='OUTLINER_DATA_GP_LAYER')

# API settings panel
class KITSUNE_PT_api_settings(bpy.types.Panel):
    """API settings panel"""
    bl_label = "API Settings"
    bl_idname = "KITSUNE_PT_api_settings"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Kitsune'
    bl_parent_id = "KITSUNE_PT_chat_panel"
    bl_options = {'DEFAULT_CLOSED'}
    
    @classmethod
    def poll(cls, context):
        return context.scene.kitsune_ui.view_mode == 'SETTINGS'
    
    def draw(self, context):
        layout = self.layout
        preferences = context.preferences.addons.get(__package__, None)
        
        if not preferences:
            layout.label(text="Addon settings not found", icon='ERROR')
            return
            
        prefs = preferences.preferences
        
        # API Provider selection
        layout.label(text="AI Provider Selection:", icon='WORLD')
        layout.prop(prefs, "api_provider", text="")
        
        # Settings for the selected provider
        selected_provider = prefs.api_provider
        box = layout.box()
        
        if selected_provider == 'anthropic':
            box.label(text="Anthropic Settings:", icon='SETTINGS')
            box.prop(prefs, "anthropic_api_key", text="API Key")
            box.prop(prefs, "anthropic_model", text="Model")
            
        elif selected_provider == 'google':
            box.label(text="Google Gemini Settings:", icon='SETTINGS')
            box.prop(prefs, "google_api_key", text="API Key")
            box.prop(prefs, "google_model", text="Model")
            
        elif selected_provider == 'deepseek':
            box.label(text="DeepSeek Settings:", icon='SETTINGS')
            box.prop(prefs, "deepseek_api_key", text="API Key")
            box.prop(prefs, "deepseek_model", text="Model")
            
        elif selected_provider == 'openai':
            box.label(text="OpenAI Settings:", icon='SETTINGS')
            box.prop(prefs, "openai_api_key", text="API Key")
            box.prop(prefs, "openai_model", text="Model")
        
        # Validation button
        layout.operator("kitsune.validate_api_key", text="Validate API Key", icon='CHECKMARK')

# Chat settings panel
class KITSUNE_PT_chat_settings(bpy.types.Panel):
    """Chat settings panel"""
    bl_label = "Chat Settings"
    bl_idname = "KITSUNE_PT_chat_settings"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Kitsune'
    bl_parent_id = "KITSUNE_PT_chat_panel"
    bl_options = {'DEFAULT_CLOSED'}
    
    @classmethod
    def poll(cls, context):
        return context.scene.kitsune_ui.view_mode == 'SETTINGS'
    
    def draw(self, context):
        layout = self.layout
        preferences = context.preferences.addons.get(__package__, None)
        
        if not preferences:
            layout.label(text="Addon settings not found", icon='ERROR')
            return
            
        prefs = preferences.preferences
        
        # Chat settings
        layout.label(text="Chat Settings:", icon='OUTLINER_OB_FONT')
        layout.prop(prefs, "max_conversation_length", text="Max Conversation Length")
        layout.prop(prefs, "auto_scroll", text="Auto Scroll")
        layout.prop(prefs, "show_timestamps", text="Show Timestamps")
        
        # UI settings
        layout.label(text="UI Settings:", icon='WINDOW')
        kitsune_ui = context.scene.kitsune_ui
        layout.prop(kitsune_ui, "panel_height", text="Panel Height")
        layout.prop(kitsune_ui, "image_preview_size", text="Image Preview Size")

# Main panel
class KITSUNE_PT_chat_panel(bpy.types.Panel):
    """Kitsune main panel"""
    bl_label = "Kitsune AI Assistant"
    bl_idname = "KITSUNE_PT_chat_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Kitsune'
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        kitsune_ui = scene.kitsune_ui
        
        # Toggle view mode
        row = layout.row(align=True)
        row.prop(kitsune_ui, "view_mode", expand=True)
        
        # Chat mode UI
        if kitsune_ui.view_mode == 'CHAT':
            # Set panel height (fill to bottom of viewport)
            region_height = context.region.height
            panel_height = int(region_height * kitsune_ui.panel_height)
            
            # Chat session management
            row = layout.row(align=True)
            row.scale_y = 1.2
            
            # New chat button
            new_chat_op = row.operator("kitsune.new_chat", text="New Chat", icon='ADD')
            
            if len(kitsune_ui.chat_sessions) > 0:
                # Display session name (like a dropdown menu)
                if kitsune_ui.active_session_index < len(kitsune_ui.chat_sessions):
                    active_session = kitsune_ui.chat_sessions[kitsune_ui.active_session_index]
                    row.label(text=active_session.name, icon='TEXT')
                    
                # Session switch and delete buttons
                sub_row = row.row(align=True)
                sub_row.scale_x = 0.6
                op = sub_row.operator("kitsune.rename_chat", text="", icon='GREASEPENCIL')
                op.chat_index = kitsune_ui.active_session_index
                sub_row.operator("kitsune.delete_chat", text="", icon='X')
            
            # Message display area - Claude-like simple design
            chat_box = layout.box()
            # Maximize to fill viewport height
            chat_box.scale_y = panel_height / 100
            
            # Display messages
            if kitsune_ui.active_session_index < len(kitsune_ui.chat_sessions):
                active_session = kitsune_ui.chat_sessions[kitsune_ui.active_session_index]
                messages = active_session.messages
                
                # If no messages, show placeholder
                if len(messages) == 0:
                    placeholder = chat_box.column(align=True)
                    placeholder.alignment = 'CENTER'
                    placeholder.label(text="Kitsune AI Assistant")
                    placeholder.label(text="How can I help you today?")
                    placeholder.separator()
                else:
                    # If there are messages, display them
                    # Limit displayed messages based on scroll position
                    addon_prefs = context.preferences.addons[__package__].preferences
                    scroll_pos = kitsune_ui.scroll_position
                    
                    # Select messages to display
                    visible_messages = messages
                    if len(messages) > 5:  # Limit to what fits in viewport
                        start_idx = max(0, min(scroll_pos, len(messages) - 5))
                        visible_messages = messages[start_idx:start_idx+5]
                    
                    message_col = chat_box.column(align=True)
                    for msg in visible_messages:
                        draw_chat_message(message_col, msg, addon_prefs)
                        message_col.separator(factor=0.5)
                    
                    # Scroll buttons (if there are many messages)
                    if len(messages) > 5:
                        scroll_row = layout.row(align=True)
                        scroll_row.scale_y = 0.8
                        scroll_up = scroll_row.operator("kitsune.scroll_chat", text="↑")
                        scroll_up.direction = 'UP'
                        scroll_down = scroll_row.operator("kitsune.scroll_chat", text="↓")
                        scroll_down.direction = 'DOWN'
            
            # Processing indicator
            if kitsune_ui.is_processing:
                processing_row = layout.row()
                processing_row.alignment = 'CENTER'
                processing_row.label(text="Processing...", icon='SORTTIME')
            
            # File attachment and input field
            input_box = layout.column(align=True)
            
            # Attachment related (only image icon for images)
            attach_row = input_box.row(align=True)
            attach_row.scale_y = 1.1
            attach_row.scale_x = 0.9
            
            if kitsune_ui.attachment_path:
                file_name = kitsune_ui.attachment_path.split('/')[-1]
                attach_row.label(text=file_name, icon='FILE_TICK')
                attach_row.operator("kitsune.clear_attachment", text="", icon='X')
            else:
                attach_row.operator("kitsune.attach_image", text="", icon='IMAGE_DATA')
            
            # Input field and send button
            input_row = input_box.row(align=True)
            input_row.scale_y = 1.2
            
            # Text input field (expanded)
            input_field = input_row.column()
            input_field.prop(kitsune_ui, "input_text", text="")
            
            # Send button
            send_btn = input_row.operator("kitsune.send_message", text="", icon='EXPORT')
            
            # Placeholder text
            if not kitsune_ui.input_text.strip():
                placeholder_text = "Type your message..."
                input_box.label(text=placeholder_text, icon='GHOST')
        
        # Settings mode UI
        elif kitsune_ui.view_mode == 'SETTINGS':
            # Settings tabs are implemented in child panels
            pass

# Image attachment operator
class KITSUNE_OT_attach_image(bpy.types.Operator):
    """Attach an image file"""
    bl_idname = "kitsune.attach_image"
    bl_label = "Attach Image"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    filepath: StringProperty(
        name="File Path",
        description="Path to the image file to attach",
        subtype='FILE_PATH'
    )
    
    def execute(self, context):
        utils.log_debug(f"Attaching image: {self.filepath}")
        context.scene.kitsune_ui.attachment_path = self.filepath
        return {'FINISHED'}
    
    def invoke(self, context, event):
        context.window_manager.fileselect_add(self)
        return {'RUNNING_MODAL'}

# Toggle view mode
class KITSUNE_OT_toggle_view_mode(bpy.types.Operator):
    """Toggle view mode"""
    bl_idname = "kitsune.toggle_view_mode"
    bl_label = "Toggle View Mode"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    def execute(self, context):
        kitsune_ui = context.scene.kitsune_ui
        modes = ['CHAT', 'SETTINGS']
        current_index = modes.index(kitsune_ui.view_mode)
        next_index = (current_index + 1) % len(modes)
        kitsune_ui.view_mode = modes[next_index]
        return {'FINISHED'}

# Chat scroll
class KITSUNE_OT_scroll_chat(bpy.types.Operator):
    """Scroll chat history"""
    bl_idname = "kitsune.scroll_chat"
    bl_label = "Scroll Chat"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    direction: EnumProperty(
        name="Direction",
        items=[('UP', "Up", "Scroll up"), ('DOWN', "Down", "Scroll down")],
        default='DOWN'
    )
    
    def execute(self, context):
        kitsune_ui = context.scene.kitsune_ui
        
        if self.direction == 'UP':
            kitsune_ui.scroll_position = max(0, kitsune_ui.scroll_position - 1)
        else:
            active_session = kitsune_ui.chat_sessions[kitsune_ui.active_session_index]
            max_scroll = max(0, len(active_session.messages) - 5)
            kitsune_ui.scroll_position = min(max_scroll, kitsune_ui.scroll_position + 1)
            
        utils.log_debug(f"Scrolled chat {self.direction}. Position: {kitsune_ui.scroll_position}")
        return {'FINISHED'}

# New chat
class KITSUNE_OT_new_chat(bpy.types.Operator):
    """Create a new chat session"""
    bl_idname = "kitsune.new_chat"
    bl_label = "New Chat"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    def execute(self, context):
        kitsune_ui = context.scene.kitsune_ui
        
        # Create a new session
        new_session = kitsune_ui.chat_sessions.add()
        new_session.name = f"New Chat {len(kitsune_ui.chat_sessions)}"
        
        # Set timestamp
        now = datetime.datetime.now()
        new_session.created_at = now.strftime("%Y-%m-%d %H:%M:%S")
        
        # Set new session as active
        kitsune_ui.active_session_index = len(kitsune_ui.chat_sessions) - 1
        
        utils.log_debug(f"Created new chat session: {new_session.name}")
        return {'FINISHED'}

# Delete chat
class KITSUNE_OT_delete_chat(bpy.types.Operator):
    """Delete the selected chat session"""
    bl_idname = "kitsune.delete_chat"
    bl_label = "Delete Chat"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    confirm: BoolProperty(
        name="Confirm",
        description="Confirm deletion",
        default=False
    )
    
    def execute(self, context):
        if self.confirm:
            kitsune_ui = context.scene.kitsune_ui
            index = kitsune_ui.active_session_index
            
            if index >= 0 and index < len(kitsune_ui.chat_sessions):
                session_name = kitsune_ui.chat_sessions[index].name
                kitsune_ui.chat_sessions.remove(index)
                
                # Adjust index to avoid out of range
                if len(kitsune_ui.chat_sessions) > 0:
                    kitsune_ui.active_session_index = min(index, len(kitsune_ui.chat_sessions) - 1)
                else:
                    kitsune_ui.active_session_index = 0
                
                utils.log_debug(f"Deleted chat session: {session_name}")
                return {'FINISHED'}
        return {'CANCELLED'}
    
    def invoke(self, context, event):
        return context.window_manager.invoke_props_dialog(self)
    
    def draw(self, context):
        layout = self.layout
        layout.label(text="Delete this chat session?")
        layout.prop(self, "confirm", text="Confirm")

# Rename chat session
class KITSUNE_OT_rename_chat(bpy.types.Operator):
    """Rename chat session"""
    bl_idname = "kitsune.rename_chat"
    bl_label = "Rename Chat"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    chat_index: IntProperty(
        name="Chat Index",
        description="Index of the chat to rename",
        default=0
    )
    
    new_name: StringProperty(
        name="New Name",
        description="New chat name",
        default=""
    )
    
    def execute(self, context):
        kitsune_ui = context.scene.kitsune_ui
        
        if self.chat_index >= 0 and self.chat_index < len(kitsune_ui.chat_sessions):
            old_name = kitsune_ui.chat_sessions[self.chat_index].name
            kitsune_ui.chat_sessions[self.chat_index].name = self.new_name
            utils.log_debug(f"Renamed chat: {old_name} → {self.new_name}")
            return {'FINISHED'}
            
        return {'CANCELLED'}
    
    def invoke(self, context, event):
        kitsune_ui = context.scene.kitsune_ui
        
        if self.chat_index >= 0 and self.chat_index < len(kitsune_ui.chat_sessions):
            self.new_name = kitsune_ui.chat_sessions[self.chat_index].name
            
        return context.window_manager.invoke_props_dialog(self)
    
    def draw(self, context):
        layout = self.layout
        layout.prop(self, "new_name")

# File attachment
class KITSUNE_OT_attach_file(bpy.types.Operator):
    """Attach a file"""
    bl_idname = "kitsune.attach_file"
    bl_label = "Attach File"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    filepath: StringProperty(
        name="File Path",
        description="Path to the file to attach",
        subtype='FILE_PATH'
    )
    
    def execute(self, context):
        utils.log_debug(f"Attaching file: {self.filepath}")
        context.scene.kitsune_ui.attachment_path = self.filepath
        return {'FINISHED'}
    
    def invoke(self, context, event):
        context.window_manager.fileselect_add(self)
        return {'RUNNING_MODAL'}

# Clear attachment
class KITSUNE_OT_clear_attachment(bpy.types.Operator):
    """Clear attachment"""
    bl_idname = "kitsune.clear_attachment"
    bl_label = "Clear Attachment"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    def execute(self, context):
        utils.log_debug("Clearing attachment")
        context.scene.kitsune_ui.attachment_path = ""
        return {'FINISHED'}

# API key validation
class KITSUNE_OT_validate_api_key(bpy.types.Operator):
    """Validate API key"""
    bl_idname = "kitsune.validate_api_key"
    bl_label = "Validate API Key"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    def execute(self, context):
        utils.log_debug("Validating API key")
        
        preferences = context.preferences.addons.get(__package__, None)
        if not preferences:
            self.report({'ERROR'}, "Addon settings not found")
            return {'CANCELLED'}
            
        prefs = preferences.preferences
        is_valid, message = prefs.validate_provider_api_key(context)
        
        if is_valid:
            self.report({'INFO'}, f"API key is valid: {message}")
        else:
            self.report({'ERROR'}, f"API key error: {message}")
            
        return {'FINISHED'}

# Code preview
class KITSUNE_OT_preview_code(bpy.types.Operator):
    """Preview generated code"""
    bl_idname = "kitsune.preview_code"
    bl_label = "Preview Code"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    code: StringProperty(
        name="Code",
        description="Code to preview",
        default=""
    )
    
    def execute(self, context):
        utils.log_debug("Previewing code")
        return {'FINISHED'}
    
    def invoke(self, context, event):
        return context.window_manager.invoke_props_dialog(self, width=600)
    
    def draw(self, context):
        layout = self.layout
        layout.label(text="Generated Code:")
        layout.separator()
        
        # Text area to display code
        for line in self.code.split('\n'):
            layout.label(text=line)

# Execute code
class KITSUNE_OT_execute_code(bpy.types.Operator):
    """Execute generated code"""
    bl_idname = "kitsune.execute_code"
    bl_label = "Execute Code"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    code: StringProperty(
        name="Code",
        description="Code to execute",
        default=""
    )
    
    def execute(self, context):
        utils.log_debug("Executing code")
        try:
            exec(self.code)
            self.report({'INFO'}, "Code executed successfully")
            return {'FINISHED'}
        except Exception as e:
            self.report({'ERROR'}, f"Code execution error: {str(e)}")
            return {'CANCELLED'}

# Cancel code
class KITSUNE_OT_cancel_code(bpy.types.Operator):
    """Cancel code execution"""
    bl_idname = "kitsune.cancel_code"
    bl_label = "Cancel Code"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    def execute(self, context):
        utils.log_debug("Cancelled code execution")
        return {'FINISHED'}

# Send message
class KITSUNE_OT_send_message(bpy.types.Operator):
    """Send a message"""
    bl_idname = "kitsune.send_message"
    bl_label = "Send Message"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    def execute(self, context):
        kitsune_ui = context.scene.kitsune_ui
        message_text = kitsune_ui.input_text.strip()
        
        if not message_text:
            self.report({'WARNING'}, "Please enter a message")
            return {'CANCELLED'}
        
        # Do nothing if already processing
        if kitsune_ui.is_processing:
            self.report({'WARNING'}, "AI is processing. Please wait")
            return {'CANCELLED'}
        
        # Get or create active session
        if len(kitsune_ui.chat_sessions) == 0:
            bpy.ops.kitsune.new_chat()
        
        active_session = kitsune_ui.chat_sessions[kitsune_ui.active_session_index]
        
        # Create user message
        now = datetime.datetime.now()
        timestamp = now.strftime("%H:%M")
        
        user_message = active_session.messages.add()
        user_message.content = message_text
        user_message.sender = "USER"
        user_message.timestamp = timestamp
        
        # Add attachment if any
        if kitsune_ui.attachment_path:
            attachment = user_message.attachments.add()
            attachment.path = kitsune_ui.attachment_path
            attachment.name = kitsune_ui.attachment_path.split('/')[-1]
            
            # Detect file type (simple version)
            file_ext = attachment.name.split('.')[-1].lower() if '.' in attachment.name else ''
            if file_ext in ['jpg', 'jpeg', 'png', 'bmp', 'tiff', 'tga']:
                attachment.type = "IMAGE"
            else:
                attachment.type = "FILE"
                
            # Clear attachment path
            kitsune_ui.attachment_path = ""
        
        # Clear input field
        kitsune_ui.input_text = ""
        
        # Set processing flag
        kitsune_ui.is_processing = True
        
        # Scroll to latest message
        active_session.active_message_index = len(active_session.messages) - 1
        
        # Get API provider and send request
        utils.log_debug(f"Sending message: {message_text}")
        
        try:
            # Get provider from addon settings
            preferences = context.preferences.addons[__package__].preferences
            provider_id = preferences.api_provider
            provider = get_provider_instance(provider_id)
            
            if not provider:
                self.report({'ERROR'}, f"Failed to initialize provider: {provider_id}")
                kitsune_ui.is_processing = False
                return {'CANCELLED'}
            
            # Check if provider's API key is set
            api_key_attr = f"{provider_id}_api_key"
            api_key = getattr(preferences, api_key_attr, "")
            
            if not api_key:
                self.report({'ERROR'}, f"API key for {provider_id} is not set. Please add your API key in settings.")
                kitsune_ui.is_processing = False
                return {'CANCELLED'}
            
            # Create context information
            context_info = create_context_info()
            
            # Add chat history
            context_info["chat_history"] = []
            for msg in active_session.messages:
                context_info["chat_history"].append({
                    "role": "user" if msg.sender == "USER" else "assistant",
                    "content": msg.content
                })
            
            # API request callback function
            def api_response_callback(response):
                try:
                    # UI updates must be done in Blender's main thread
                    def update_ui():
                        try:
                            # Create AI response message
                            ai_message = active_session.messages.add()
                            ai_message.sender = "AI"
                            ai_message.timestamp = datetime.datetime.now().strftime("%H:%M")
                            
                            # Check for errors
                            if "error" in response:
                                ai_message.content = f"Error occurred: {response['error']}"
                                utils.log_error(f"API response error: {response['error']}")
                            else:
                                ai_message.content = response.get("text", "Empty response")
                                
                                # Extract code if present
                                from .api import format_code_for_execution
                                code = format_code_for_execution(ai_message.content)
                                if code:
                                    ai_message.code = code
                            
                            # Reset processing flag
                            kitsune_ui.is_processing = False
                            
                            # Request UI update
                            for area in bpy.context.screen.areas:
                                if area.type == 'VIEW_3D':
                                    area.tag_redraw()
                                    
                            # Scroll to latest message
                            if len(active_session.messages) > 0:
                                active_session.active_message_index = len(active_session.messages) - 1
                            
                            utils.log_debug("API request completed, UI updated")
                            return None
                            
                        except Exception as e:
                            utils.log_error(f"UI update error: {str(e)}")
                            kitsune_ui.is_processing = False
                            return None
                    
                    # Schedule UI update in main thread
                    bpy.app.timers.register(update_ui, first_interval=0.1)
                    
                except Exception as e:
                    utils.log_error(f"Callback error: {str(e)}")
                    kitsune_ui.is_processing = False
            
            # Execute API request in separate thread
            request_thread = APIRequestThread(
                provider=provider,
                prompt=message_text,
                context_info=context_info,
                callback=api_response_callback
            )
            request_thread.start()
            
            return {'FINISHED'}
            
        except Exception as e:
            utils.log_error(f"Message send error: {str(e)}")
            self.report({'ERROR'}, f"Error occurred: {str(e)}")
            kitsune_ui.is_processing = False
            return {'CANCELLED'}

# Clear chat
class KITSUNE_OT_clear_chat(bpy.types.Operator):
    """Clear chat history"""
    bl_idname = "kitsune.clear_chat"
    bl_label = "Clear Chat"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    confirm: BoolProperty(
        name="Confirm",
        description="Confirm clearing",
        default=False
    )
    
    def execute(self, context):
        if self.confirm:
            kitsune_ui = context.scene.kitsune_ui
            
            if kitsune_ui.active_session_index < len(kitsune_ui.chat_sessions):
                active_session = kitsune_ui.chat_sessions[kitsune_ui.active_session_index]
                active_session.messages.clear()
                utils.log_debug("Cleared chat history")
                return {'FINISHED'}
        return {'CANCELLED'}
    
    def invoke(self, context, event):
        return context.window_manager.invoke_props_dialog(self)
    
    def draw(self, context):
        layout = self.layout
        layout.label(text="Clear chat history?")
        layout.prop(self, "confirm", text="Confirm")

# Copy code to clipboard
class KITSUNE_OT_copy_code(bpy.types.Operator):
    """Copy generated code to clipboard"""
    bl_idname = "kitsune.copy_code"
    bl_label = "Copy Code"
    bl_options = {'REGISTER', 'INTERNAL'}
    
    code: StringProperty(
        name="Code",
        description="Code to copy",
        default=""
    )
    
    def execute(self, context):
        utils.log_debug("Copying code to clipboard")
        context.window_manager.clipboard = self.code
        self.report({'INFO'}, "Code copied to clipboard")
        return {'FINISHED'}

# Classes to register
classes = (
    KitsuneAttachment,
    KitsuneChatMessage,
    KitsuneChatSession,
    KitsuneUIProperties,
    KITSUNE_UL_chat_sessions,
    KITSUNE_PT_chat_panel,
    KITSUNE_PT_api_settings,
    KITSUNE_PT_chat_settings,
    KITSUNE_OT_toggle_view_mode,
    KITSUNE_OT_scroll_chat,
    KITSUNE_OT_new_chat,
    KITSUNE_OT_delete_chat,
    KITSUNE_OT_rename_chat,
    KITSUNE_OT_attach_file,
    KITSUNE_OT_attach_image,
    KITSUNE_OT_clear_attachment,
    KITSUNE_OT_validate_api_key,
    KITSUNE_OT_preview_code,
    KITSUNE_OT_execute_code,
    KITSUNE_OT_cancel_code,
    KITSUNE_OT_send_message,
    KITSUNE_OT_clear_chat,
    KITSUNE_OT_copy_code
)

def register():
    """Register UI classes."""
    # Check for already registered classes to avoid errors
    for cls in classes:
        try:
            bpy.utils.unregister_class(cls)
        except:
            pass
    
    # Register classes
    for cls in classes:
        try:
            bpy.utils.register_class(cls)
        except Exception as e:
            utils.log_error(f"Failed to register class {cls.__name__}: {str(e)}")
    
    # Register properties on the scene
    try:
        bpy.types.Scene.kitsune_ui = PointerProperty(type=KitsuneUIProperties)
    except Exception as e:
        utils.log_error(f"Failed to register kitsune_ui property: {str(e)}")

def unregister():
    """Unregister UI classes."""
    # Remove properties from the scene
    try:
        del bpy.types.Scene.kitsune_ui
    except Exception as e:
        utils.log_error(f"Failed to unregister kitsune_ui property: {str(e)}")
    
    # Unregister classes in reverse order
    for cls in reversed(classes):
        try:
            bpy.utils.unregister_class(cls)
        except Exception as e:
            utils.log_error(f"Failed to unregister class {cls.__name__}: {str(e)}")